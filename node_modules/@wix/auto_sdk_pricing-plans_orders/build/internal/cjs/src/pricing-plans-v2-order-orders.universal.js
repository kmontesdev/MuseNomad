"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPricePreview = exports.getOfflineOrderPreview = exports.getOnlineOrderPreview = exports.createOfflineOrder = exports.createOnlineOrder = exports.requestCancellation = exports.memberListOrders = exports.memberGetOrder = exports.resumeOrder = exports.pauseOrder = exports.markAsPaid = exports.cancelOrder = exports.postponeEndDate = exports.managementListOrders = exports.managementGetOrder = exports.WebhookIdentityType = exports.ReasonNotSuspendable = exports.SortOrder = exports.Set = exports.Status = exports.PaymentStatus = exports.CancellationEffectiveAt = exports.CancellationCause = exports.OrderStatus = exports.OrderMethod = exports.OrderType = exports.PeriodUnit = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixPricingPlansV2Order = __importStar(require("./pricing-plans-v2-order-orders.http.js"));
var PeriodUnit;
(function (PeriodUnit) {
    /** Not defined. */
    PeriodUnit["UNDEFINED"] = "UNDEFINED";
    /** Time unit is a day. */
    PeriodUnit["DAY"] = "DAY";
    /** Time unit is a week. */
    PeriodUnit["WEEK"] = "WEEK";
    /** Time unit is a month. */
    PeriodUnit["MONTH"] = "MONTH";
    /** Time unit is a year. */
    PeriodUnit["YEAR"] = "YEAR";
})(PeriodUnit || (exports.PeriodUnit = PeriodUnit = {}));
var OrderType;
(function (OrderType) {
    /** Undefined order type. */
    OrderType["UNDEFINED"] = "UNDEFINED";
    /** The buyer purchased the plan using the site. */
    OrderType["ONLINE"] = "ONLINE";
    /** The buyer made a manual, offline purchase without using the site. */
    OrderType["OFFLINE"] = "OFFLINE";
    /** The buyer made a purchase through an external payment provider. */
    OrderType["EXTERNAL"] = "EXTERNAL";
})(OrderType || (exports.OrderType = OrderType = {}));
var OrderMethod;
(function (OrderMethod) {
    /** Unknown order method. */
    OrderMethod["UNKNOWN"] = "UNKNOWN";
    /** Mail Order / Telephone Order transaction. */
    OrderMethod["MOTO"] = "MOTO";
    /** Point of Sale transaction. */
    OrderMethod["POS"] = "POS";
})(OrderMethod || (exports.OrderMethod = OrderMethod = {}));
var OrderStatus;
(function (OrderStatus) {
    /** Undefined order status. */
    OrderStatus["UNDEFINED"] = "UNDEFINED";
    /** Order has been initiated but payment hasn't been processed yet. The plan isn't yet available for use to the buyer. */
    OrderStatus["DRAFT"] = "DRAFT";
    /** Order has been purchased and its start date is set in the future. */
    OrderStatus["PENDING"] = "PENDING";
    /** Order has been processed. The plan is available for use. */
    OrderStatus["ACTIVE"] = "ACTIVE";
    /** Order, and use of the plan, is paused. The order, and use of the plan, can be resumed. */
    OrderStatus["PAUSED"] = "PAUSED";
    /** Order has completed its duration and is no longer available for use. */
    OrderStatus["ENDED"] = "ENDED";
    /** Order has been canceled. */
    OrderStatus["CANCELED"] = "CANCELED";
})(OrderStatus || (exports.OrderStatus = OrderStatus = {}));
var CancellationCause;
(function (CancellationCause) {
    /** Undefined cancellation cause. */
    CancellationCause["UNDEFINED"] = "UNDEFINED";
    /** Wix user canceled the order. */
    CancellationCause["OWNER_ACTION"] = "OWNER_ACTION";
    /** Buyer initiated the cancellation. */
    CancellationCause["MEMBER_ACTION"] = "MEMBER_ACTION";
    /** Payment transaction failed. */
    CancellationCause["PAYMENT_FAILURE"] = "PAYMENT_FAILURE";
    /** Buyer's payment details weren't set up correctly. */
    CancellationCause["PAYMENT_SETUP_FAILURE"] = "PAYMENT_SETUP_FAILURE";
    /** Reason for the cancellation is unknown. */
    CancellationCause["UNKNOWN"] = "UNKNOWN";
})(CancellationCause || (exports.CancellationCause = CancellationCause = {}));
var CancellationEffectiveAt;
(function (CancellationEffectiveAt) {
    /** Undefined cancellation time. */
    CancellationEffectiveAt["UNDEFINED"] = "UNDEFINED";
    /** Cancellation occurs immediately and the buyer can no longer use the plan. */
    CancellationEffectiveAt["IMMEDIATELY"] = "IMMEDIATELY";
    /** Cancellation occurs at the next payment date and time. Buyer can continue to use the plan until that date and time. */
    CancellationEffectiveAt["NEXT_PAYMENT_DATE"] = "NEXT_PAYMENT_DATE";
})(CancellationEffectiveAt || (exports.CancellationEffectiveAt = CancellationEffectiveAt = {}));
var PaymentStatus;
(function (PaymentStatus) {
    /** Undefined payment status. */
    PaymentStatus["UNDEFINED"] = "UNDEFINED";
    /** Payment has been paid. */
    PaymentStatus["PAID"] = "PAID";
    /** Payment has been refunded. */
    PaymentStatus["REFUNDED"] = "REFUNDED";
    /** Payment transaction didn't complete. */
    PaymentStatus["FAILED"] = "FAILED";
    /** Payment has not been paid. */
    PaymentStatus["UNPAID"] = "UNPAID";
    /** Billing has been initialized, but actual charge is yet to be made. This can happen for free trials and payments made with PayPal. */
    PaymentStatus["PENDING"] = "PENDING";
    /** No payment was necessary. For example, for free plans or free trials. */
    PaymentStatus["NOT_APPLICABLE"] = "NOT_APPLICABLE";
})(PaymentStatus || (exports.PaymentStatus = PaymentStatus = {}));
var Status;
(function (Status) {
    /** Undefined status. */
    Status["UNDEFINED"] = "UNDEFINED";
    /** Status while the order is paused. */
    Status["ACTIVE"] = "ACTIVE";
    /** Status when the order is resumed. */
    Status["ENDED"] = "ENDED";
})(Status || (exports.Status = Status = {}));
var Set;
(function (Set) {
    /** Same behavior as `BASIC`.` */
    Set["UNKNOWN_SET"] = "UNKNOWN_SET";
    /** Doesn't return any order form submission data. */
    Set["BASIC"] = "BASIC";
    /** Returns all order form submission data. */
    Set["FULL"] = "FULL";
})(Set || (exports.Set = Set = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var ReasonNotSuspendable;
(function (ReasonNotSuspendable) {
    /** Undefined reason. */
    ReasonNotSuspendable["UNDEFINED"] = "UNDEFINED";
    /** Saved in the database but is awaiting payment. Non-active orders can't be suspended. */
    ReasonNotSuspendable["PENDING"] = "PENDING";
    /** Trial orders can't be suspended. */
    ReasonNotSuspendable["TRIAL"] = "TRIAL";
    /** Canceled orders can't be suspended. */
    ReasonNotSuspendable["CANCELED"] = "CANCELED";
    /** Ended orders can't be suspended. */
    ReasonNotSuspendable["ENDED"] = "ENDED";
    /** Paid for orders with future start dates can't be suspended. */
    ReasonNotSuspendable["NOT_STARTED"] = "NOT_STARTED";
    /** Order is already suspended. */
    ReasonNotSuspendable["ALREADY_SUSPENDED"] = "ALREADY_SUSPENDED";
    /** Orders based on recurring payments using older stripe versions can't be suspended. */
    ReasonNotSuspendable["OLD_STRIPE"] = "OLD_STRIPE";
})(ReasonNotSuspendable || (exports.ReasonNotSuspendable = ReasonNotSuspendable = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves an order by ID.
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @param options - Options to use when getting an order.
 * @permissionId PRICING_PLANS.READ_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.OrderManagementService.GetOrder
 */
async function managementGetOrder(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        fieldSet: options?.fieldSet,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.managementGetOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', fieldSet: '$[1].fieldSet' },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.managementGetOrder = managementGetOrder;
/**
 * Retrieves a list of up to 50 pricing plan orders and details, given the specified sorting and filtering.
 *
 * By default, this endpoint will retrieve all orders and return them sorted by `createdDate` in `DESC`, descending order.
 * `sort.fieldName` supports `endDate` and `createdDate` fields and defaults to `ASC`, ascending order.
 * @public
 * @param options - Filtering, sorting, and pagination options.
 * @permissionId PRICING_PLANS.READ_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.OrderManagementService.ListOrders
 */
async function managementListOrders(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        buyerIds: options?.buyerIds,
        planIds: options?.planIds,
        autoRenewCanceled: options?.autoRenewCanceled,
        orderStatuses: options?.orderStatuses,
        paymentStatuses: options?.paymentStatuses,
        limit: options?.limit,
        offset: options?.offset,
        sorting: options?.sorting,
        fieldSet: options?.fieldSet,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.managementListOrders(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                buyerIds: '$[0].buyerIds',
                planIds: '$[0].planIds',
                autoRenewCanceled: '$[0].autoRenewCanceled',
                orderStatuses: '$[0].orderStatuses',
                paymentStatuses: '$[0].paymentStatuses',
                limit: '$[0].limit',
                offset: '$[0].offset',
                sorting: '$[0].sorting',
                fieldSet: '$[0].fieldSet',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.managementListOrders = managementListOrders;
/**
 * Extends the duration of a pricing plan order by postponing the order's `endDate`. Postponing the end date of an order does not impact payments.
 *
 * New `endDate` must be later than the order's current `endDate`. Can't postpone orders that are unlimited.
 * Can't postpone an order with `status`: `PAUSED`.
 * @param _id - Order ID.
 * @param endDate - New end date and time.
 *
 * Must be later than the current end date and time.
 * @public
 * @requiredField _id
 * @requiredField endDate
 * @param options - Options for postponing the end date of an order.
 * @permissionId PRICING_PLANS.MANAGE_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.OrderManagementService.PostponeEndDate
 */
async function postponeEndDate(_id, endDate) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        endDate: endDate,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.postponeEndDate(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', endDate: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'endDate']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.postponeEndDate = postponeEndDate;
/**
 * Cancels an existing order.
 *
 * For orders with recurring payments, a cancellation can be set to occur either `IMMEDIATELY` or at the `NEXT_PAYMENT_DATE`.
 * For orders with one-time payments, a cancellation can only be set for `IMMEDIATELY`.
 *
 * #### Canceling during the free trial period.
 *
 * When a buyer cancels their order during the free trial period, the buyer's subscription expires at the end
 * of the free trial period and they will not be billed. The buyer may continue using the benefits until the end
 * of the free trial period.
 *
 * When a Wix user cancels an ordered plan during the free trial period, they choose whether to apply the cancellation
 * `IMMEDIATELY` or at the `NEXT_PAYMENT_DATE`. Canceling `IMMEDIATELY` will end the subscription for the buyer
 * immediately, even during the free trial period and the buyer won't be billed. Canceling at the
 * `NEXT_PAYMENT_DATE` allows the buyer to continue using the benefits of the subscription until the end of the free trial period.
 * Then, the subscription ends and the buyer is not billed.
 * @param _id - Order ID.
 * @param effectiveAt - __Required.__ When the order will be canceled. One-time orders can only be canceled `IMMEDIATELY`.
 * @public
 * @requiredField _id
 * @requiredField effectiveAt
 * @param options - Options for canceling orders.
 * @permissionId PRICING_PLANS.MANAGE_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.OrderManagementService.CancelOrder
 */
async function cancelOrder(_id, effectiveAt) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        effectiveAt: effectiveAt,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.cancelOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', effectiveAt: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'effectiveAt']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.cancelOrder = cancelOrder;
/**
 * Marks an offline order as paid.
 * > __Note__: Marking separate payment cycles as paid is not yet supported. The entire order will be marked as paid. Subsequent offline payments do trigger events and emails, but are not registered as additional offline payments.
 *
 * Marking an offline order as paid causes the following changes:
 * - The order's `lastPaymentStatus` changes to `"PAID"`.
 * - The order's status changes to either `"PENDING"` or `"ACTIVE"`, depending on the order's `startDate`.
 *
 * An error occurs if you attempt to:
 * - Mark an already-paid, offline order as paid. You cannot mark an offline order as paid twice.
 * - Mark an online order as paid. The Mark as Paid method is supported for offline orders only.
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @permissionId PRICING_PLANS.MANAGE_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.OrderManagementService.MarkAsPaid
 */
async function markAsPaid(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Order.markAsPaid(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.markAsPaid = markAsPaid;
/**
 * Pauses an order. Calling this method changes the order status to `"PAUSED"` and updates the `pausePeriods` array.
 *
 * Only orders with `status`: `ACTIVE` can be paused.
 * For orders with recurring payments, it also pauses the payment schedule. Buyers are not charged when an order is paused.
 * Pausing an order affects the end date of the order by adding the time the order is paused to the `endDate`.
 * The `endDate` and the `earliestEndDate` for the order are adjusted to include the pause period when the order is resumed.
 *
 * To resume a paused order, call Resume Order.
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @permissionId PRICING_PLANS.MANAGE_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.OrderManagementService.PauseOrder
 */
async function pauseOrder(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Order.pauseOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.pauseOrder = pauseOrder;
/**
 * Resumes a paused order. For orders with recurring payments, it also restarts the payment schedule.
 *
 * Resuming an order causes the following changes:
 * - The order status changes to `"ACTIVE"`.
 * - The `pausePeriods` array is updated.
 * - The `endDate` for the order is adjusted to include the pause period.
 * - For orders with recurring payments, the payment schedule is restarted.
 * - The `earliestEndDate` is adjusted to include the pause period. (This property is reserved for future use).
 *
 * To pause an order, call Pause Order.
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @permissionId PRICING_PLANS.MANAGE_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.OrderManagementService.ResumeOrder
 */
async function resumeOrder(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Order.resumeOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.resumeOrder = resumeOrder;
/**
 * Retrieves an order for the currently logged-in member by ID.
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @param options - Options for getting a logged-in member's order.
 * @permissionId PRICING_PLANS.READ_OWN_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 * @returns Requested order.
 * @fqn com.wixpress.membership.v2.orders.member.MemberOrdersService.GetOrder
 */
async function memberGetOrder(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        fieldSet: options?.fieldSet,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.memberGetOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.order;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', fieldSet: '$[1].fieldSet' },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.memberGetOrder = memberGetOrder;
/**
 * Retrieves a list of up to 100 pricing plan orders for currently logged-in member.
 * @public
 * @param options - Filtering, sorting, and pagination options.
 * @permissionId PRICING_PLANS.READ_OWN_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 * @fqn com.wixpress.membership.v2.orders.member.MemberOrdersService.ListOrders
 */
async function memberListOrders(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        planIds: options?.planIds,
        autoRenewCanceled: options?.autoRenewCanceled,
        orderStatuses: options?.orderStatuses,
        paymentStatuses: options?.paymentStatuses,
        limit: options?.limit,
        offset: options?.offset,
        sorting: options?.sorting,
        fieldSet: options?.fieldSet,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.memberListOrders(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                planIds: '$[0].planIds',
                autoRenewCanceled: '$[0].autoRenewCanceled',
                orderStatuses: '$[0].orderStatuses',
                paymentStatuses: '$[0].paymentStatuses',
                limit: '$[0].limit',
                offset: '$[0].offset',
                sorting: '$[0].sorting',
                fieldSet: '$[0].fieldSet',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.memberListOrders = memberListOrders;
/**
 * Cancels an order. Recurring orders can be canceled either immediately or at the next payment date. One time orders can only be canceled immediately.
 *
 * There may be some operations that continue to be processed before the status of the order is changed to `"CANCELED"`. For example, payments might need to be refunded before the order is fully canceled.
 *
 * Canceling during the free trial period: When a buyer cancels their order during the free trial period, the buyer's subscription expires at the end of the free trial period and they won't be billed. The buyer may continue using the benefits until the end of the free trial period.
 *
 * >**Note:**
 * >This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
 * @param _id - Order ID.
 * @param effectiveAt - Required. Whether to cancel the order effective immediately or at the next payment date. One-time orders can only be canceled immediately.
 * @public
 * @requiredField _id
 * @requiredField effectiveAt
 * @param options - Options for requesting a cancellation.
 * @permissionId PRICING_PLANS.MANAGE_OWN_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 * @fqn com.wixpress.membership.v2.orders.member.MemberOrdersService.RequestCancellation
 */
async function requestCancellation(_id, effectiveAt) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        effectiveAt: effectiveAt,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.requestCancellation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', effectiveAt: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'effectiveAt']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.requestCancellation = requestCancellation;
/**
 * Creates an online order for a site member.
 *
 * If this method is called by a site member ([SDK](https://dev.wix.com/docs/sdk/articles/get-started/about-identities#site-member) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/about-identities#site-member)), the plan is automatically ordered on behalf of that site member. Otherwise, you must specify `onBehalf.memberId` in your call.
 *
 * When an online order is created, but payment hasn't been processed, its status is set to `DRAFT`. After the payment has been processed, if the start date is in the future the order's status is set to `PENDING`. Otherwise, it's set to `ACTIVE`.
 * @param planId - Plan ID.
 * @public
 * @requiredField options.onBehalf.memberId
 * @requiredField planId
 * @fqn com.wixpress.membership.v2.orders.CheckoutService.CreateOnlineOrder
 */
async function createOnlineOrder(planId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        planId: planId,
        startDate: options?.startDate,
        couponCode: options?.couponCode,
        onBehalf: options?.onBehalf,
        submissionId: options?.submissionId,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.createOnlineOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                planId: '$[0]',
                startDate: '$[1].startDate',
                couponCode: '$[1].couponCode',
                onBehalf: '$[1].onBehalf',
                submissionId: '$[1].submissionId',
            },
            singleArgumentUnchanged: false,
        }, ['planId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createOnlineOrder = createOnlineOrder;
/**
 * Creates an order for a buyer who purchased the plan with an offline transaction.
 *
 * An offline order is handled off of the Wix site and is marked as `type`: `offline`. If a pricing plan
 * has a limit on the amount of purchases per buyer, that limit is ignored for offline orders.
 * Tax is only applied if the site [has it configured](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection).
 *
 * When creating a free offline order:
 * The order's status is set to `"PENDING"` if the start date is in the future. Otherwise, the status is set to `"ACTIVE"`.
 * The order's last payment status is set to `"NOT_APPLICABLE"`. "
 *
 * When creating a non-free offline order:
 * The order's status is set to `"PENDING"` if the start date is in the future. Otherwise, the status is set to `"ACTIVE"`.
 * The order's last payment status is set to `"UNPAID"` or `"PAID"` based on the data passed in the `paid` boolean in the request.
 *
 * Payment for an offline order can be set in 1 of 2 ways:
 * + During order creation, set `paid`: `true`.
 * + After creation, call Mark As Paid.
 * @param planId - ID of the plan being ordered, from the Plans API.
 * @param memberId - ID of the member ordering the plan, from the Members API.
 * @public
 * @requiredField memberId
 * @requiredField planId
 * @param options - Options for creating an offline order.
 * @permissionId PRICING_PLANS.REGISTER_OFFLINE_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.CheckoutService.CreateOfflineOrder
 */
async function createOfflineOrder(planId, memberId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        planId: planId,
        memberId: memberId,
        startDate: options?.startDate,
        paid: options?.paid,
        couponCode: options?.couponCode,
        submissionId: options?.submissionId,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.createOfflineOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                planId: '$[0]',
                memberId: '$[1]',
                startDate: '$[2].startDate',
                paid: '$[2].paid',
                couponCode: '$[2].couponCode',
                submissionId: '$[2].submissionId',
            },
            singleArgumentUnchanged: false,
        }, ['planId', 'memberId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createOfflineOrder = createOfflineOrder;
/**
 * Returns an `order` object that represents a potential online order for a site member.
 *
 * You can use this method to show a site member a preview of an online order before [creating](https://dev.wix.com/docs/rest/business-solutions/pricing-plans/pricing-plans/orders/create-online-order) it.
 *
 * This method must be called using the site member identity ([SDK](https://dev.wix.com/docs/sdk/articles/get-started/about-identities#site-member) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/about-identities#site-member)). Therefore, [Wix apps](https://dev.wix.com/docs/build-apps) can't currently call this method using REST.
 * @param planId - Plan ID.
 * @public
 * @requiredField planId
 * @permissionId PRICING_PLANS.PURCHASE_PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Access Verticals by Automations
 * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Set Up Automations
 * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 * @fqn com.wixpress.membership.v2.orders.CheckoutService.GetOnlineOrderPreview
 */
async function getOnlineOrderPreview(planId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        planId: planId,
        startDate: options?.startDate,
        couponCode: options?.couponCode,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.getOnlineOrderPreview(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                planId: '$[0]',
                startDate: '$[1].startDate',
                couponCode: '$[1].couponCode',
            },
            singleArgumentUnchanged: false,
        }, ['planId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getOnlineOrderPreview = getOnlineOrderPreview;
/**
 * Performs a dry run of a purchase and provides an order preview.
 *
 * The preview uses the same logic as purchasing a plan, but the preview is not saved. Because an order is not actually
 * created, the preview order's `orderId` and `subscriptionId` are displayed as a string of multiple zero characters
 * (`000000-0000`). Tax is only calculated if the site [has it configured](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection).
 * <br>
 * If a pricing plan has a limit on the amount of purchases per buyer, that limit is not considered for generating the preview.
 * But, if that limit has been reached and this order would then exceed the amount of purchases permitted for this buyer, then
 * `purchaseLimitExceeded` will return as `true`.
 *
 * To get a general price preview for a plan that's not buyer-specific, call Get Price Preview.
 * @param memberId - Member ID of the buyer the previewed order is for, from the Members API.
 * @public
 * @requiredField memberId
 * @requiredField planId
 * @param options - Options for previewing the offline order.
 * @param planId - ID of the plan of the previewed order.
 * @permissionId PRICING_PLANS.MANAGE_ORDERS
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.orders.CheckoutService.GetOfflineOrderPreview
 */
async function getOfflineOrderPreview(planId, memberId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        planId: planId,
        memberId: memberId,
        startDate: options?.startDate,
        couponCode: options?.couponCode,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.getOfflineOrderPreview(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                planId: '$[0]',
                memberId: '$[1]',
                startDate: '$[2].startDate',
                couponCode: '$[2].couponCode',
            },
            singleArgumentUnchanged: false,
        }, ['planId', 'memberId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getOfflineOrderPreview = getOfflineOrderPreview;
/**
 * Retrieves a plan's pricing.
 *
 * The price preview uses the same logic as purchasing a plan, but the preview is not saved. Tax is only applied if
 * the site [has it configured](https://support.wix.com/en/article/pricing-plans-setting-up-tax-collection). The price is returned
 * in the pricing model format used for orders. Learn more about pricing models ([REST](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/introduction#wix-pricing-plans_pricing-plans_introduction_pricing-models)|[SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/introduction#pricing-models)).
 *
 * Buyers do not have to be logged in to preview the price, and as such, the details returned are not buyer-specific. To
 * generate a preview of a purchase for a specific buyer, call Get Offline Order Preview.
 * @param planId - ID of plan to preview.
 * @public
 * @requiredField planId
 * @param options - Options for getting a price preview.
 * @permissionId PRICING_PLANS.READ_PUBLIC_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Access Verticals by Automations
 * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Set Up Automations
 * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.membership.v2.orders.CheckoutService.GetPricePreview
 */
async function getPricePreview(planId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        planId: planId,
        couponCode: options?.couponCode,
    });
    const reqOpts = ambassadorWixPricingPlansV2Order.getPricePreview(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                planId: '$[0]',
                couponCode: '$[1].couponCode',
            },
            singleArgumentUnchanged: false,
        }, ['planId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getPricePreview = getPricePreview;
//# sourceMappingURL=pricing-plans-v2-order-orders.universal.js.map