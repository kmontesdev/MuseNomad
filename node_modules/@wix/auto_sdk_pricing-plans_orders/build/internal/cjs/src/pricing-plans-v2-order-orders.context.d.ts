import { managementGetOrder as publicManagementGetOrder, managementListOrders as publicManagementListOrders, postponeEndDate as publicPostponeEndDate, cancelOrder as publicCancelOrder, markAsPaid as publicMarkAsPaid, pauseOrder as publicPauseOrder, resumeOrder as publicResumeOrder, memberGetOrder as publicMemberGetOrder, memberListOrders as publicMemberListOrders, requestCancellation as publicRequestCancellation, createOnlineOrder as publicCreateOnlineOrder, createOfflineOrder as publicCreateOfflineOrder, getOnlineOrderPreview as publicGetOnlineOrderPreview, getOfflineOrderPreview as publicGetOfflineOrderPreview, getPricePreview as publicGetPricePreview } from './pricing-plans-v2-order-orders.public.js';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';
import { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';
import { onOrderAutoRenewCanceled as publicOnOrderAutoRenewCanceled } from './pricing-plans-v2-order-orders.public.js';
import { onOrderCanceled as publicOnOrderCanceled } from './pricing-plans-v2-order-orders.public.js';
import { onOrderCycleStarted as publicOnOrderCycleStarted } from './pricing-plans-v2-order-orders.public.js';
import { onOrderEndDatePostponed as publicOnOrderEndDatePostponed } from './pricing-plans-v2-order-orders.public.js';
import { onOrderEnded as publicOnOrderEnded } from './pricing-plans-v2-order-orders.public.js';
import { onOrderMarkedAsPaid as publicOnOrderMarkedAsPaid } from './pricing-plans-v2-order-orders.public.js';
import { onOrderPaused as publicOnOrderPaused } from './pricing-plans-v2-order-orders.public.js';
import { onOrderPurchased as publicOnOrderPurchased } from './pricing-plans-v2-order-orders.public.js';
import { onOrderResumed as publicOnOrderResumed } from './pricing-plans-v2-order-orders.public.js';
import { onOrderStarted as publicOnOrderStarted } from './pricing-plans-v2-order-orders.public.js';
import { onOrderUpdated as publicOnOrderUpdated } from './pricing-plans-v2-order-orders.public.js';
import { onOrderCreated as publicOnOrderCreated } from './pricing-plans-v2-order-orders.public.js';
import { onOrderStartDateChanged as publicOnOrderStartDateChanged } from './pricing-plans-v2-order-orders.public.js';
export declare const managementGetOrder: MaybeContext<BuildRESTFunction<typeof publicManagementGetOrder> & typeof publicManagementGetOrder>;
export declare const managementListOrders: MaybeContext<BuildRESTFunction<typeof publicManagementListOrders> & typeof publicManagementListOrders>;
export declare const postponeEndDate: MaybeContext<BuildRESTFunction<typeof publicPostponeEndDate> & typeof publicPostponeEndDate>;
export declare const cancelOrder: MaybeContext<BuildRESTFunction<typeof publicCancelOrder> & typeof publicCancelOrder>;
export declare const markAsPaid: MaybeContext<BuildRESTFunction<typeof publicMarkAsPaid> & typeof publicMarkAsPaid>;
export declare const pauseOrder: MaybeContext<BuildRESTFunction<typeof publicPauseOrder> & typeof publicPauseOrder>;
export declare const resumeOrder: MaybeContext<BuildRESTFunction<typeof publicResumeOrder> & typeof publicResumeOrder>;
export declare const memberGetOrder: MaybeContext<BuildRESTFunction<typeof publicMemberGetOrder> & typeof publicMemberGetOrder>;
export declare const memberListOrders: MaybeContext<BuildRESTFunction<typeof publicMemberListOrders> & typeof publicMemberListOrders>;
export declare const requestCancellation: MaybeContext<BuildRESTFunction<typeof publicRequestCancellation> & typeof publicRequestCancellation>;
export declare const createOnlineOrder: MaybeContext<BuildRESTFunction<typeof publicCreateOnlineOrder> & typeof publicCreateOnlineOrder>;
export declare const createOfflineOrder: MaybeContext<BuildRESTFunction<typeof publicCreateOfflineOrder> & typeof publicCreateOfflineOrder>;
export declare const getOnlineOrderPreview: MaybeContext<BuildRESTFunction<typeof publicGetOnlineOrderPreview> & typeof publicGetOnlineOrderPreview>;
export declare const getOfflineOrderPreview: MaybeContext<BuildRESTFunction<typeof publicGetOfflineOrderPreview> & typeof publicGetOfflineOrderPreview>;
export declare const getPricePreview: MaybeContext<BuildRESTFunction<typeof publicGetPricePreview> & typeof publicGetPricePreview>;
/**
 * Triggered when an order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`.
 *
 * This webhook is *not* triggered in the following scenarios:
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`. Instead, at the time of cancellation, Order Canceled is triggered.
 * + When an order expires at the end of the current payment cycle because it was canceled and `effectiveAt` was set to `NEXT_PAYMENT_DATE`. Instead, at the time of expiration, Order Canceled and Order Ended are triggered.
 */
export declare const onOrderAutoRenewCanceled: ReturnType<typeof createEventModule<typeof publicOnOrderAutoRenewCanceled>>;
/**
 * Triggered when an order is canceled.
 *
 * This webhook is triggered either immediately or at the end of the current payment cycle, as follows:
 * + If the order is canceled and `effectiveAt` is set to `IMMEDIATELY`, the webhook is triggered immediately when canceled.
 * + If the order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`, the webhook is triggered at the end of the current payment cycle. In this case, the Order Auto Renew Canceled Webhook is triggered immediately.
 */
export declare const onOrderCanceled: ReturnType<typeof createEventModule<typeof publicOnOrderCanceled>>;
/**
 * Triggered at the start of a new payment cycle for an existing order.
 *
 * Not triggered at the initial start of an offline order.
 */
export declare const onOrderCycleStarted: ReturnType<typeof createEventModule<typeof publicOnOrderCycleStarted>>;
/**
 * Triggered when an order's `endDate` is postponed.
 */
export declare const onOrderEndDatePostponed: ReturnType<typeof createEventModule<typeof publicOnOrderEndDatePostponed>>;
/**
 * Triggered when an order ends.
 *
 * This webhook is triggered:
 * + When an order expires at the end of the current payment cycle.
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`.
 */
export declare const onOrderEnded: ReturnType<typeof createEventModule<typeof publicOnOrderEnded>>;
/**
 * Triggered when an offline order is marked as paid.
 */
export declare const onOrderMarkedAsPaid: ReturnType<typeof createEventModule<typeof publicOnOrderMarkedAsPaid>>;
/**
 * Triggered when an order is paused.
 */
export declare const onOrderPaused: ReturnType<typeof createEventModule<typeof publicOnOrderPaused>>;
/**
 * Triggered for any of the following purchase events:
 * + Order is paid in full.
 * + At least 1 order cycle payment is paid for.
 * + Offline order is created, even if not yet marked as paid.
 * + Free order is created.
 */
export declare const onOrderPurchased: ReturnType<typeof createEventModule<typeof publicOnOrderPurchased>>;
/**
 * Triggered when a paused order is resumed.
 */
export declare const onOrderResumed: ReturnType<typeof createEventModule<typeof publicOnOrderResumed>>;
/**
 * Triggered when an order reaches its `startDate`. Applies to both purchased and free orders.
 */
export declare const onOrderStarted: ReturnType<typeof createEventModule<typeof publicOnOrderStarted>>;
/**
 * Triggered for any of the following update events:
 *
 * + Order is paid for. Order Purchased is also triggered.
 * + Order reaches its start date or end date. Order Started and Order Ended, respectively, are also triggered.
 * + New payment cycle of an order starts. Order Cycle Started is also triggered.
 * + Offline order is marked as paid. Order Marked As Paid is also triggered.
 * + End date of the order is postponed. Order End Date Postponed is also triggered
 * + Order is paused, or a paused order is resumed. Order Paused and Order Resumed, respectively, are also triggered.
 * + Order is canceled, either immediately or at the end of the payment cycle. Order Canceled and Order Auto Renew Canceled, respectively, are also triggered.
 */
export declare const onOrderUpdated: ReturnType<typeof createEventModule<typeof publicOnOrderUpdated>>;
/**
 * Triggered when an order is created.
 */
export declare const onOrderCreated: ReturnType<typeof createEventModule<typeof publicOnOrderCreated>>;
/**
 * Triggered when an order's `startDate` is changed.
 */
export declare const onOrderStartDateChanged: ReturnType<typeof createEventModule<typeof publicOnOrderStartDateChanged>>;
export { PeriodUnit, OrderType, OrderMethod, OrderStatus, CancellationCause, CancellationEffectiveAt, PaymentStatus, Status, Set, SortOrder, ReasonNotSuspendable, WebhookIdentityType, } from './pricing-plans-v2-order-orders.universal.js';
export { Order, Buyer, PriceDetails, PriceDetailsPricingModelOneOf, Tax, Recurrence, Duration, Coupon, PricingDetails, PricingDetailsPricingModelOneOf, SpannedPrice, PriceDuration, Price, Fee, Cancellation, PausePeriod, CurrentCycle, OrderCycle, FormData, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, RestoreInfo, EntityUpdatedEvent, EntityDeletedEvent, ActionEvent, Empty, OrderPurchased, OrderStarted, OrderCycleStarted, OrderAutoRenewCanceled, OrderEnded, GetOrderRequest, GetOrderResponse, ListOrdersRequest, Sorting, ListOrdersResponse, PagingMetadataV2, Cursors, OrdersQueryOrdersRequest, QueryV2, QueryV2PagingMethodOneOf, Paging, CursorPaging, OrdersQueryOrdersResponse, GetOrdersStatsRequest, GetOrdersStatsResponse, GetAvailableOrderActionsRequest, GetAvailableOrderActionsResponse, PostponeEndDateRequest, PostponeEndDateResponse, OrderEndDatePostponed, CancelOrderRequest, CancelOrderResponse, OrderCanceled, MarkAsPaidRequest, MarkAsPaidResponse, OrderMarkedAsPaid, PauseOrderRequest, PauseOrderResponse, OrderPaused, BulkPauseOrderRequest, BulkPauseOrderResponse, BulkOrderResult, ItemMetadata, ApplicationError, BulkActionMetadata, ResumeOrderRequest, ResumeOrderResponse, OrderResumed, BulkResumeOrderRequest, BulkResumeOrderResponse, MessageEnvelope, IdentificationData, IdentificationDataIdOneOf, MemberGetOrderRequest, MemberGetOrderResponse, MemberListOrdersRequest, MemberListOrdersResponse, QueryOrdersRequest, QueryOrdersResponse, RequestCancellationRequest, RequestCancellationResponse, CreateOnlineOrderRequest, OnBehalf, CreateOnlineOrderResponse, CouponsError, CreateGuestOnlineOrderRequest, Captcha, Guest, CreateGuestOnlineOrderResponse, CreateOfflineOrderRequest, CreateOfflineOrderResponse, CreateExternalOrderRequest, CreateExternalOrderResponse, GetOnlineOrderPreviewRequest, GetOnlineOrderPreviewResponse, GetGuestOnlineOrderPreviewRequest, GetGuestOnlineOrderPreviewResponse, GetOfflineOrderPreviewRequest, GetOfflineOrderPreviewResponse, GetPricePreviewRequest, GetPricePreviewResponse, ChangeStartDateRequest, ChangeStartDateResponse, OrderStartDateChanged, ApplyCouponRequest, ApplyCouponResponse, SetSubmissionRequest, SetSubmissionResponse, BaseEventMetadata, EventMetadata, OrderAutoRenewCanceledEnvelope, OrderCanceledEnvelope, OrderCycleStartedEnvelope, OrderEndDatePostponedEnvelope, OrderEndedEnvelope, OrderMarkedAsPaidEnvelope, OrderPausedEnvelope, OrderPurchasedEnvelope, OrderResumedEnvelope, OrderStartedEnvelope, OrderUpdatedEnvelope, OrderCreatedEnvelope, OrderStartDateChangedEnvelope, ManagementGetOrderOptions, ManagementListOrdersOptions, MemberGetOrderOptions, MemberListOrdersOptions, CreateOnlineOrderOptions, CreateOfflineOrderOptions, GetOnlineOrderPreviewOptions, GetOfflineOrderPreviewOptions, GetPricePreviewOptions, } from './pricing-plans-v2-order-orders.universal.js';
