import { managementGetOrder as publicManagementGetOrder, managementListOrders as publicManagementListOrders, postponeEndDate as publicPostponeEndDate, cancelOrder as publicCancelOrder, markAsPaid as publicMarkAsPaid, pauseOrder as publicPauseOrder, resumeOrder as publicResumeOrder, memberGetOrder as publicMemberGetOrder, memberListOrders as publicMemberListOrders, requestCancellation as publicRequestCancellation, createOnlineOrder as publicCreateOnlineOrder, createOfflineOrder as publicCreateOfflineOrder, getOnlineOrderPreview as publicGetOnlineOrderPreview, getOfflineOrderPreview as publicGetOfflineOrderPreview, getPricePreview as publicGetPricePreview, } from './pricing-plans-v2-order-orders.public.js';
import { createRESTModule } from '@wix/sdk-runtime/rest-modules';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';
import { onOrderAutoRenewCanceled as publicOnOrderAutoRenewCanceled } from './pricing-plans-v2-order-orders.public.js';
import { onOrderCanceled as publicOnOrderCanceled } from './pricing-plans-v2-order-orders.public.js';
import { onOrderCycleStarted as publicOnOrderCycleStarted } from './pricing-plans-v2-order-orders.public.js';
import { onOrderEndDatePostponed as publicOnOrderEndDatePostponed } from './pricing-plans-v2-order-orders.public.js';
import { onOrderEnded as publicOnOrderEnded } from './pricing-plans-v2-order-orders.public.js';
import { onOrderMarkedAsPaid as publicOnOrderMarkedAsPaid } from './pricing-plans-v2-order-orders.public.js';
import { onOrderPaused as publicOnOrderPaused } from './pricing-plans-v2-order-orders.public.js';
import { onOrderPurchased as publicOnOrderPurchased } from './pricing-plans-v2-order-orders.public.js';
import { onOrderResumed as publicOnOrderResumed } from './pricing-plans-v2-order-orders.public.js';
import { onOrderStarted as publicOnOrderStarted } from './pricing-plans-v2-order-orders.public.js';
import { onOrderUpdated as publicOnOrderUpdated } from './pricing-plans-v2-order-orders.public.js';
import { onOrderCreated as publicOnOrderCreated } from './pricing-plans-v2-order-orders.public.js';
import { onOrderStartDateChanged as publicOnOrderStartDateChanged } from './pricing-plans-v2-order-orders.public.js';
export const managementGetOrder = /*#__PURE__*/ createRESTModule(publicManagementGetOrder);
export const managementListOrders = /*#__PURE__*/ createRESTModule(publicManagementListOrders);
export const postponeEndDate = /*#__PURE__*/ createRESTModule(publicPostponeEndDate);
export const cancelOrder = /*#__PURE__*/ createRESTModule(publicCancelOrder);
export const markAsPaid = /*#__PURE__*/ createRESTModule(publicMarkAsPaid);
export const pauseOrder = /*#__PURE__*/ createRESTModule(publicPauseOrder);
export const resumeOrder = /*#__PURE__*/ createRESTModule(publicResumeOrder);
export const memberGetOrder = /*#__PURE__*/ createRESTModule(publicMemberGetOrder);
export const memberListOrders = /*#__PURE__*/ createRESTModule(publicMemberListOrders);
export const requestCancellation = /*#__PURE__*/ createRESTModule(publicRequestCancellation);
export const createOnlineOrder = /*#__PURE__*/ createRESTModule(publicCreateOnlineOrder);
export const createOfflineOrder = /*#__PURE__*/ createRESTModule(publicCreateOfflineOrder);
export const getOnlineOrderPreview = /*#__PURE__*/ createRESTModule(publicGetOnlineOrderPreview);
export const getOfflineOrderPreview = /*#__PURE__*/ createRESTModule(publicGetOfflineOrderPreview);
export const getPricePreview = /*#__PURE__*/ createRESTModule(publicGetPricePreview);
/**
 * Triggered when an order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`.
 *
 * This webhook is *not* triggered in the following scenarios:
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`. Instead, at the time of cancellation, Order Canceled is triggered.
 * + When an order expires at the end of the current payment cycle because it was canceled and `effectiveAt` was set to `NEXT_PAYMENT_DATE`. Instead, at the time of expiration, Order Canceled and Order Ended are triggered.
 */
export const onOrderAutoRenewCanceled = createEventModule(publicOnOrderAutoRenewCanceled);
/**
 * Triggered when an order is canceled.
 *
 * This webhook is triggered either immediately or at the end of the current payment cycle, as follows:
 * + If the order is canceled and `effectiveAt` is set to `IMMEDIATELY`, the webhook is triggered immediately when canceled.
 * + If the order is canceled and `effectiveAt` is set to `NEXT_PAYMENT_DATE`, the webhook is triggered at the end of the current payment cycle. In this case, the Order Auto Renew Canceled Webhook is triggered immediately.
 */
export const onOrderCanceled = createEventModule(publicOnOrderCanceled);
/**
 * Triggered at the start of a new payment cycle for an existing order.
 *
 * Not triggered at the initial start of an offline order.
 */
export const onOrderCycleStarted = createEventModule(publicOnOrderCycleStarted);
/**
 * Triggered when an order's `endDate` is postponed.
 */
export const onOrderEndDatePostponed = createEventModule(publicOnOrderEndDatePostponed);
/**
 * Triggered when an order ends.
 *
 * This webhook is triggered:
 * + When an order expires at the end of the current payment cycle.
 * + When an order is canceled and `effectiveAt` is set to `IMMEDIATELY`.
 */
export const onOrderEnded = createEventModule(publicOnOrderEnded);
/**
 * Triggered when an offline order is marked as paid.
 */
export const onOrderMarkedAsPaid = createEventModule(publicOnOrderMarkedAsPaid);
/**
 * Triggered when an order is paused.
 */
export const onOrderPaused = createEventModule(publicOnOrderPaused);
/**
 * Triggered for any of the following purchase events:
 * + Order is paid in full.
 * + At least 1 order cycle payment is paid for.
 * + Offline order is created, even if not yet marked as paid.
 * + Free order is created.
 */
export const onOrderPurchased = createEventModule(publicOnOrderPurchased);
/**
 * Triggered when a paused order is resumed.
 */
export const onOrderResumed = createEventModule(publicOnOrderResumed);
/**
 * Triggered when an order reaches its `startDate`. Applies to both purchased and free orders.
 */
export const onOrderStarted = createEventModule(publicOnOrderStarted);
/**
 * Triggered for any of the following update events:
 *
 * + Order is paid for. Order Purchased is also triggered.
 * + Order reaches its start date or end date. Order Started and Order Ended, respectively, are also triggered.
 * + New payment cycle of an order starts. Order Cycle Started is also triggered.
 * + Offline order is marked as paid. Order Marked As Paid is also triggered.
 * + End date of the order is postponed. Order End Date Postponed is also triggered
 * + Order is paused, or a paused order is resumed. Order Paused and Order Resumed, respectively, are also triggered.
 * + Order is canceled, either immediately or at the end of the payment cycle. Order Canceled and Order Auto Renew Canceled, respectively, are also triggered.
 */
export const onOrderUpdated = createEventModule(publicOnOrderUpdated);
/**
 * Triggered when an order is created.
 */
export const onOrderCreated = createEventModule(publicOnOrderCreated);
/**
 * Triggered when an order's `startDate` is changed.
 */
export const onOrderStartDateChanged = createEventModule(publicOnOrderStartDateChanged);
export { PeriodUnit, OrderType, OrderMethod, OrderStatus, CancellationCause, CancellationEffectiveAt, PaymentStatus, Status, Set, SortOrder, ReasonNotSuspendable, WebhookIdentityType, } from './pricing-plans-v2-order-orders.universal.js';
//# sourceMappingURL=pricing-plans-v2-order-orders.context.js.map