import { NonNullablePaths } from '@wix/sdk-types';
/** Information about the pricing plan. */
export interface Plan {
    /**
     * Plan ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * Plan name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Plan description.
     * @maxLength 450
     */
    description?: string | null;
    /** List of text strings that promote what is included with this plan. For example, "Plenty of parking" or "Free gift on your birthday." */
    perks?: StringList;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing;
    /** Whether the plan is public (visible to site visitors and members). */
    public?: boolean | null;
    /**
     * Whether the plan is archived. Archived plans are not visible and can't be purchased anymore, but existing purchases remain in effect.
     * @readonly
     */
    archived?: boolean;
    /**
     * Whether the plan is marked as primary.
     * @readonly
     */
    primary?: boolean;
    /**
     * Whether the plan has any orders (including pending and unpaid orders).
     * @readonly
     */
    hasOrders?: boolean;
    /**
     * Date plan was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date plan was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * URL-friendly version of plan name. Unique across all plans in the same site.
     * @minLength 1
     * @readonly
     * @format URL_SLUG
     */
    slug?: string | null;
    /**
     * Number of times the same buyer can purchase the plan. Currently limited to support:
     * - Empty value or a value of `0`, meaning no limitation.
     * - Value of `1`, meaning limited to 1 purchase per buyer.
     * @max 1
     */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /**
     * Whether the buyer is allowed to cancel their plan. Defaults to false.
     * If false, calling Request Cancellation returns an error.
     */
    buyerCanCancel?: boolean | null;
    /**
     * Any terms and conditions that apply to the plan. This information is displayed during checkout.
     * @maxLength 3000
     */
    termsAndConditions?: string | null;
    /**
     * ID of the form associated with the plan at checkout.
     *
     * Learn more about [forms](https://support.wix.com/en/article/wix-forms-an-overview).
     * @format GUID
     */
    formId?: string | null;
}
/** This wrapper type exists to distinguish an empty string list from no list at all in update requests. */
export interface StringList {
    /**
     * @minLength 1
     * @maxLength 1400
     * @maxSize 500
     */
    values?: string[];
}
/** Plan pricing information. Includes the price of the plan and payment details. */
export interface Pricing extends PricingPricingModelOneOf {
    /** Pricing model indicating that the plan has recurring payments. This type of subscription is not a "Wix subscription," which encompasses various types of subscriptions, such as Wix Stores subscriptions, Wix invoice subscriptions, and all pricing plan models. */
    subscription?: Recurrence;
    /** Pricing model indicating a single payment per cycle and the length of the cycle. The cycle is the duration of the plan, not a payment cycle. */
    singlePaymentForDuration?: Duration;
    /** Pricing model indicating the plan is paid in a single payment. The plan is valid until canceled. */
    singlePaymentUnlimited?: boolean | null;
    /** Amount for a single payment. For subscriptions, this is the amount to pay each payment cycle and it is required. For plans that are not recurring plans, it is the single payment amount for the whole subscription. */
    price?: Money;
    /**
     * Free trial period for the plan in days. Available only for recurring plans, meaning plans whose pricing model is `subscription`. Set to `0` to remove the free trial.
     * @max 999
     */
    freeTrialDays?: number | null;
}
/** @oneof */
export interface PricingPricingModelOneOf {
    /** Pricing model indicating that the plan has recurring payments. This type of subscription is not a "Wix subscription," which encompasses various types of subscriptions, such as Wix Stores subscriptions, Wix invoice subscriptions, and all pricing plan models. */
    subscription?: Recurrence;
    /** Pricing model indicating a single payment per cycle and the length of the cycle. The cycle is the duration of the plan, not a payment cycle. */
    singlePaymentForDuration?: Duration;
    /** Pricing model indicating the plan is paid in a single payment. The plan is valid until canceled. */
    singlePaymentUnlimited?: boolean | null;
}
/** An object specifying how often and for how long payments recur (may be forever). */
export interface Recurrence {
    /**
     * Number of payment cycles the subscription is valid for.
     * `0` for unlimited plans or for plans that are valid until canceled.
     */
    cycleDuration?: Duration;
    /**
     * Length of a payment cycle. For example, 1 month to have monthly payments.
     * Multiply `cycleDuration`'s `count` by `cycleCount` to get the subscription duration.
     * Currently, only a value of `1` is supported.
     * @max 2000
     */
    cycleCount?: number | null;
}
/** A duration expressed in number of time units. */
export interface Duration {
    /**
     * Number of days, months, weeks, or years in a single payment cycle. Currently limited to support only `1`.
     * @min 1
     */
    count?: number | null;
    /** Unit of time for the cycle duration. */
    unit?: PeriodUnitWithLiterals;
}
export declare enum PeriodUnit {
    /** Not defined. */
    UNDEFINED = "UNDEFINED",
    /** Time unit is a day. */
    DAY = "DAY",
    /** Time unit is a week. */
    WEEK = "WEEK",
    /** Time unit is a month. */
    MONTH = "MONTH",
    /** Time unit is a year. */
    YEAR = "YEAR"
}
/** @enumType */
export type PeriodUnitWithLiterals = PeriodUnit | 'UNDEFINED' | 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
export interface Money {
    /**
     * Monetary amount. Decimal string with a period as a decimal separator. For example, `'3.99'`. Can't be negative.
     * @decimalValue options { lt:1000000000000, gte:0.000, maxScale:3 }
     */
    value?: string;
    /**
     * Currency code. Three-letter currency code in [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format. For example, `'USD'`.
     * @format CURRENCY
     */
    currency?: string;
}
export interface FeeConfig {
    /** Fee configuration. */
    fee?: Fee;
    /** The time this fee will be charged. */
    appliedAt?: AppliedAtWithLiterals;
}
export interface Fee {
    /**
     * Fee name
     * @minLength 1
     * @maxLength 40
     */
    name?: string;
    /**
     * Amount of fee to be charged
     * @decimalValue options { lt:1000000000000, gt:0.000, maxScale:3 }
     */
    amount?: string;
}
export declare enum AppliedAt {
    UNKNOWN_CHARGE_EVENT = "UNKNOWN_CHARGE_EVENT",
    /** Will charge the fee on the first payment. If the order has a free trial, it will charge after the free trial. */
    FIRST_PAYMENT = "FIRST_PAYMENT"
}
/** @enumType */
export type AppliedAtWithLiterals = AppliedAt | 'UNKNOWN_CHARGE_EVENT' | 'FIRST_PAYMENT';
export interface ListPublicPlansRequest {
    /**
     * Number of items to list. Defaults to `75`. See limits ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/list-public-plans) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#paging)).
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip. Defaults to `0`. See paging ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/list-public-plans) |[REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#paging)). */
    offset?: number | null;
    /**
     * IDs of plans to list. Non-existent IDs are ignored and don't cause errors. You can specify a maximum of 100 IDs.
     * @format GUID
     * @maxSize 100
     */
    planIds?: string[];
}
export interface ListPublicPlansResponse {
    /** List of public pricing plans. */
    plans?: PublicPlan[];
    /** Object containing paging-related data (such as the number of plans returned, the offset, and so on). */
    pagingMetadata?: PagingMetadataV2;
}
/** Public plan entity containing information about the pricing plan. Can be read by any site member or visitor. */
export interface PublicPlan {
    /**
     * Plan ID.
     * @format GUID
     */
    _id?: string;
    /**
     * Plan name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Plan description.
     * @maxLength 450
     */
    description?: string | null;
    /** What is included with this plan (for example, 1 weekly entrance to a specific class). */
    perks?: StringList;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing;
    /** Whether the plan is marked as primary. */
    primary?: boolean;
    /** Date plan was created. */
    _createdDate?: Date | null;
    /** Date plan was last updated. */
    _updatedDate?: Date | null;
    /**
     * URL-friendly version of plan name. Unique across all plans in the same site.
     * @minLength 1
     */
    slug?: string | null;
    /** Number of times the same buyer can purchase the plan. An empty value or a value of 0 means no limitation. */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /** Whether the buyer is allowed to cancel their plan. Defaults to false. */
    buyerCanCancel?: boolean | null;
    /** Any terms and conditions that apply to the plan. This information is displayed during checkout. */
    termsAndConditions?: string | null;
    /**
     * ID of the form associated with the plan at checkout.
     *
     * Learn more about [forms](https://support.wix.com/en/article/wix-forms-an-overview).
     * @format GUID
     */
    formId?: string | null;
}
export interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface QueryPublicPlansRequest {
    /** Query options. */
    query?: QueryV2;
}
export interface QueryV2 {
    /** A filter object. See supported fields and operators ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/query-public-plans) | [REST](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/filter-and-sort#wix-pricing-plans_pricing-plans_plans_filter-and-sort_query-public-plans)). */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]. */
    sort?: Sorting[];
    /** Pointer to page of results using offset. Can't be used together with 'cursorPaging'. */
    paging?: Paging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
export type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface QueryPublicPlansResponse {
    /** List of public pricing plans that match the specified query. */
    plans?: PublicPlan[];
    /** Object containing paging-related data (such as the number of plans returned, the offset, and so on). */
    pagingMetadata?: PagingMetadataV2;
}
export interface GetPlanRequest {
    /**
     * Plan ID.
     * @format GUID
     */
    _id: string;
}
export interface GetPlanResponse {
    /** Pricing plan. */
    plan?: Plan;
}
export interface ListPlansRequest {
    /** Archived filter. Defaults to `ACTIVE` (not archived) only. */
    archived?: ArchivedFilterWithLiterals;
    /** Visibility filter. Defaults to `PUBLIC_AND_HIDDEN` (meaning, both are listed). */
    public?: PublicFilterWithLiterals;
    /**
     * Number of pricing plans to list. Defaults to `75`.
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /** Number of pricing plans to skip. Defaults to `0`. */
    offset?: number | null;
    /**
     * IDs of plans to list. If non-existent IDs are specified, they are ignored and don't cause errors. If no IDs are specified, all public and hidden plans are listed according to the order displayed in a site's dashboard (which you can set with Arrange Plans). You can specify a maximum of 100 IDs.
     * @format GUID
     * @maxSize 100
     */
    planIds?: string[];
}
export declare enum ArchivedFilter {
    /** Returns all plans that are active. */
    ACTIVE = "ACTIVE",
    /** Returns all plans that are archived. */
    ARCHIVED = "ARCHIVED",
    /** Returns all plans that are active and archived. */
    ARCHIVED_AND_ACTIVE = "ARCHIVED_AND_ACTIVE"
}
/** @enumType */
export type ArchivedFilterWithLiterals = ArchivedFilter | 'ACTIVE' | 'ARCHIVED' | 'ARCHIVED_AND_ACTIVE';
export declare enum PublicFilter {
    /** Returns all public and hidden plans. */
    PUBLIC_AND_HIDDEN = "PUBLIC_AND_HIDDEN",
    /** Returns only public plans. */
    PUBLIC = "PUBLIC",
    /** Returns only hidden plans. */
    HIDDEN = "HIDDEN"
}
/** @enumType */
export type PublicFilterWithLiterals = PublicFilter | 'PUBLIC_AND_HIDDEN' | 'PUBLIC' | 'HIDDEN';
export interface ListPlansResponse {
    /** List of all public and hidden pricing plans. */
    plans?: Plan[];
    /** Object containing paging-related data (such as the number of plans returned, the offset, and so on). */
    pagingMetadata?: PagingMetadataV2;
}
export interface GetPlanStatsRequest {
}
export interface GetPlanStatsResponse {
    /** Total number of plans created, including active plans (both public and hidden) and archived plans. */
    totalPlans?: number;
}
export interface CreatePlanRequest {
    /** Plan details. */
    plan: Plan;
}
export interface CreatePlanResponse {
    /** Created plan. */
    plan?: Plan;
}
export interface UpdatePlanRequest {
    /** ID of the plan to update. */
    plan: Plan;
}
export interface UpdatePlanResponse {
    /** Updated plan. */
    plan?: Plan;
}
export interface BuyerCanCancelUpdated {
    /** Pricing plan. */
    plan?: Plan;
}
export interface SetPlanVisibilityRequest {
    /**
     * The ID of the plan to either display or hide on a site page.
     * @format GUID
     */
    _id: string;
    /** Whether a plan is visible to members and site visitors. Updates the `public` field. */
    visible: boolean;
}
export interface SetPlanVisibilityResponse {
    /** Pricing plan. */
    plan?: Plan;
}
export interface MakePlanPrimaryRequest {
    /**
     * Pricing plan ID.
     * @format GUID
     */
    _id: string;
}
export interface MakePlanPrimaryResponse {
    /** Pricing plan. */
    plan?: Plan;
}
export interface ClearPrimaryRequest {
}
export interface ClearPrimaryResponse {
}
export interface ArchivePlanRequest {
    /**
     * ID of the active plan to archive.
     * @format GUID
     */
    _id: string;
}
export interface ArchivePlanResponse {
    /** Archived plan. */
    plan?: Plan;
}
export interface PlanArchived {
    /** Pricing plan. */
    plan?: Plan;
}
export interface BulkArchivePlanRequest {
    /**
     * List of Plan IDs to archive.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    ids?: string[];
    /** Set to `true` to return the `Plan` entity in the response. */
    returnFullEntity?: boolean;
}
export interface BulkArchivePlanResponse {
    /** Plans to be archived. */
    results?: BulkPlanResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkPlanResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /** Pricing plan. */
    plan?: Plan;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface ArrangePlansRequest {
    /**
     * IDs of all non-archived plans in the order you want them arranged.
     * @format GUID
     * @minSize 1
     */
    ids?: string[];
}
export interface ArrangePlansResponse {
}
export interface CountPlansRequest {
    /** The filter. */
    filter?: Record<string, any> | null;
    /** If true, counts only visible plans (visible and not archived). If no value is specified, all plans are counted. */
    visibility?: boolean | null;
}
export interface CountPlansResponse {
    /** Number of plans in the response. */
    count?: number;
}
export interface GetPlansPremiumStatusRequest {
}
export interface GetPlansPremiumStatusResponse {
    /** True if a site has non-free, non-template plans. */
    hasPaidPlans?: boolean;
    /** True if a site has plans that were created before Pricing Plans became a premium app. */
    hasOldPlans?: boolean;
}
export interface SearchPlansRequest {
    /** Query options. */
    query?: QueryV2;
    /**
     * Search phrase for the plan name.
     * @maxLength 50
     */
    searchPhrase?: string | null;
}
export interface SearchPlansResponse {
    /** List of pricing plans that match the specified filter and search phrase. */
    plans?: Plan[];
    /** Object containing paging-related data (such as the number of plans returned, the offset, and so on). */
    pagingMetadata?: PagingMetadataV2;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
export type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
export interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
export interface PlanBuyerCanCancelUpdatedEnvelope {
    data: BuyerCanCancelUpdated;
    metadata: EventMetadata;
}
/**
 * Triggered when a plan's `buyerCanCancel` field is updated.
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionId PRICING_PLANS.READ_PLANS
 * @webhook
 * @eventType wix.pricing_plans.plan_buyer_can_cancel_updated
 * @serviceIdentifier com.wixpress.membership.v2.plans.PlansServiceV2
 * @slug buyer_can_cancel_updated
 */
export declare function onPlanBuyerCanCancelUpdated(handler: (event: PlanBuyerCanCancelUpdatedEnvelope) => void | Promise<void>): void;
export interface PlanCreatedEnvelope {
    entity: Plan;
    metadata: EventMetadata;
}
/**
 * Triggered when a pricing plan is created.
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionId PRICING_PLANS.READ_PLANS
 * @webhook
 * @eventType wix.pricing_plans.plan_created
 * @serviceIdentifier com.wixpress.membership.v2.plans.PlansServiceV2
 * @slug created
 */
export declare function onPlanCreated(handler: (event: PlanCreatedEnvelope) => void | Promise<void>): void;
export interface PlanArchivedEnvelope {
    data: PlanArchived;
    metadata: EventMetadata;
}
/**
 * Triggered when a pricing plan is archived.
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionId PRICING_PLANS.READ_PLANS
 * @webhook
 * @eventType wix.pricing_plans.plan_plan_archived
 * @serviceIdentifier com.wixpress.membership.v2.plans.PlansServiceV2
 * @slug plan_archived
 */
export declare function onPlanArchived(handler: (event: PlanArchivedEnvelope) => void | Promise<void>): void;
export interface PlanUpdatedEnvelope {
    entity: Plan;
    metadata: EventMetadata;
}
/**
 * Triggered when a pricing plan is updated.
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionId PRICING_PLANS.READ_PLANS
 * @webhook
 * @eventType wix.pricing_plans.plan_updated
 * @serviceIdentifier com.wixpress.membership.v2.plans.PlansServiceV2
 * @slug updated
 */
export declare function onPlanUpdated(handler: (event: PlanUpdatedEnvelope) => void | Promise<void>): void;
type PlanNonNullablePaths = `_id` | `perks.values` | `pricing.subscription.cycleDuration.unit` | `pricing.price.value` | `pricing.price.currency` | `archived` | `primary` | `hasOrders`;
/**
 * Retrieves a list of up to 100 public pricing plans. Public plans are visible plans that are available to site visitors and can be purchased.
 * @public
 * @param options - Options for filtering and paging the list of public plans.
 * @permissionId PRICING_PLANS.READ_PUBLIC_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Access Verticals by Automations
 * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Set Up Automations
 * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ListPublicPlans
 */
export declare function listPublicPlans(options?: ListPublicPlansOptions): Promise<NonNullablePaths<ListPublicPlansResponse, `plans` | `plans.${number}._id` | `plans.${number}.pricing.subscription.cycleDuration.unit` | `plans.${number}.pricing.price.value` | `plans.${number}.pricing.price.currency` | `plans.${number}.primary`>>;
export interface ListPublicPlansOptions {
    /**
     * Number of items to list. Defaults to `75`. See limits ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/list-public-plans) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#paging)).
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip. Defaults to `0`. See paging ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/list-public-plans) |[REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#paging)). */
    offset?: number | null;
    /**
     * IDs of plans to list. Non-existent IDs are ignored and don't cause errors. You can specify a maximum of 100 IDs.
     * @format GUID
     * @maxSize 100
     */
    planIds?: string[];
}
/**
 * Creates a query to retrieve a list of public pricing plans.
 *
 *
 * The `queryPublicPlans()` method builds a query to retrieve a list of up to 1,000 public plans and returns a [`PublicPlansQueryBuilder`](#plansquerybuilder) object.
 *
 * The returned object contains the query definition which is typically used to run the query using the [`find()`](#plansquerybuilder/find) method.
 *
 * You can refine the query by chaining `PublicPlansQueryBuilder` methods onto the query. `PublicPlansQueryBuilder` methods enable you to sort, filter, and control the results that `queryPublicPlans()` returns.
 *
 * `queryPublicPlans()` runs with the following `PublicPlansQueryBuilder` defaults that you can override:
 * - [`skip`](#plansquerybuilder/skip): `0`
 * - [`limit`](#plansquerybuilder/limit): `50`
 *
 * The methods that are chained to `queryPublicPlans()` are applied in the order they are called. For example, if you sort on the `_createdDate` property in ascending order and then on the `_id` property in ascending order, the results are sorted first by the created date of the items and then, if there are multiple results with the same date, the items are sorted by `_id` in ascending order, per created date value.
 *
 * The following `PublicPlansQueryBuilder` methods are supported for the `queryPublicPlans()` method. For a full description of the Plans object, see the object returned for the [`items`](#plansqueryresult/items) property in [`PublicPlansQueryResult`](#plansqueryresult).
 * @public
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Access Verticals by Automations
 * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Set Up Automations
 * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS
 * @permissionId PRICING_PLANS.READ_PUBLIC_PLANS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.QueryPublicPlans
 */
export declare function queryPublicPlans(): PlansQueryBuilder;
interface QueryOffsetResult {
    currentPage: number | undefined;
    totalPages: number | undefined;
    totalCount: number | undefined;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface PlansQueryResult extends QueryOffsetResult {
    items: PublicPlan[];
    query: PlansQueryBuilder;
    next: () => Promise<PlansQueryResult>;
    prev: () => Promise<PlansQueryResult>;
}
export interface PlansQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'primary' | '_createdDate' | '_updatedDate' | 'slug', value: any) => PlansQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'primary' | '_createdDate' | '_updatedDate' | 'slug', value: any) => PlansQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug', value: any) => PlansQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug', value: any) => PlansQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug', value: any) => PlansQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'slug', value: any) => PlansQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'slug', value: string) => PlansQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | 'primary' | '_createdDate' | '_updatedDate' | 'slug', value: any[]) => PlansQueryBuilder;
    in: (propertyName: '_id' | 'primary' | '_createdDate' | '_updatedDate' | 'slug', value: any) => PlansQueryBuilder;
    exists: (propertyName: '_id' | 'primary' | '_createdDate' | '_updatedDate' | 'slug', value: boolean) => PlansQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | 'primary' | '_createdDate' | '_updatedDate' | 'slug'>) => PlansQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | 'primary' | '_createdDate' | '_updatedDate' | 'slug'>) => PlansQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => PlansQueryBuilder;
    /** @param skip - Number of items to skip in the query results before returning the results. */
    skip: (skip: number) => PlansQueryBuilder;
    find: () => Promise<PlansQueryResult>;
}
/**
 * Retrieves a pricing plan by ID.
 * @param _id - Plan ID.
 * @public
 * @requiredField _id
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Pricing plan.
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.GetPlan
 */
export declare function getPlan(_id: string): Promise<NonNullablePaths<Plan, PlanNonNullablePaths>>;
/**
 * Retrieves a list of up to 100 pricing plans (including public, hidden, and archived plans).
 * @public
 * @param options - Options for filtering and paging the list of plans.
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ListPlans
 */
export declare function listPlans(options?: ListPlansOptions): Promise<NonNullablePaths<ListPlansResponse, {
    [P in PlanNonNullablePaths]: `plans.${number}.${P}`;
}[PlanNonNullablePaths]>>;
export interface ListPlansOptions {
    /** Archived filter. Defaults to `ACTIVE` (not archived) only. */
    archived?: ArchivedFilterWithLiterals;
    /** Visibility filter. Defaults to `PUBLIC_AND_HIDDEN` (meaning, both are listed). */
    public?: PublicFilterWithLiterals;
    /**
     * Number of pricing plans to list. Defaults to `75`.
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /** Number of pricing plans to skip. Defaults to `0`. */
    offset?: number | null;
    /**
     * IDs of plans to list. If non-existent IDs are specified, they are ignored and don't cause errors. If no IDs are specified, all public and hidden plans are listed according to the order displayed in a site's dashboard (which you can set with Arrange Plans). You can specify a maximum of 100 IDs.
     * @format GUID
     * @maxSize 100
     */
    planIds?: string[];
}
/**
 * Gets statistics about the pricing plans. Currently provides only the total number of pricing plans, including archived plans.
 * @public
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.GetPlanStats
 */
export declare function getPlanStats(): Promise<NonNullablePaths<GetPlanStatsResponse, `totalPlans`>>;
/**
 * Creates a pricing plan. The specified `plan` object must contain a pricing model. A pricing model can be 1 of the following:
 * - **A subscription**: A subscription with recurring payments and how often the plan occurs. Subscriptions can have free trial days.
 * - **A plan that doesn't renew**: A single payment for a specific duration that doesn't renew.
 * - **An unlimited plan**: A single payment for an unlimited amount of time (until canceled).
 * Pricing plans are available to the Wix user in the Pricing Plans section in a site's dashboard.
 * @public
 * @requiredField plan
 * @requiredField plan.name
 * @requiredField plan.pricing
 * @requiredField plan.pricing.pricingModel
 * @requiredField plan.pricing.pricingModel.singlePaymentForDuration.count
 * @requiredField plan.pricing.pricingModel.subscription.cycleCount
 * @requiredField plan.pricing.pricingModel.subscription.cycleDuration
 * @requiredField plan.pricing.pricingModel.subscription.cycleDuration.count
 * @param plan - Information for the plan being created.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Created plan.
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.CreatePlan
 */
export declare function createPlan(plan: NonNullablePaths<Plan, `name` | `pricing` | `pricing.singlePaymentForDuration.count` | `pricing.subscription.cycleCount` | `pricing.subscription.cycleDuration` | `pricing.subscription.cycleDuration.count`>): Promise<NonNullablePaths<Plan, PlanNonNullablePaths>>;
/**
 * Updates a pricing plan.
 * Updating a plan doesn't impact existing orders made for the plan. All orders keep the details of the original plan that was active at the time of purchase.
 * @public
 * @requiredField _id
 * @requiredField plan
 * @param _id - ID of the plan to update.
 * @param options - Options for updating the plan.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Updated plan.
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.UpdatePlan
 */
export declare function updatePlan(_id: string, plan: UpdatePlan): Promise<NonNullablePaths<Plan, PlanNonNullablePaths>>;
export interface UpdatePlan {
    /**
     * Plan ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * Plan name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string | null;
    /**
     * Plan description.
     * @maxLength 450
     */
    description?: string | null;
    /** List of text strings that promote what is included with this plan. For example, "Plenty of parking" or "Free gift on your birthday." */
    perks?: StringList;
    /** Plan price, payment schedule, and expiration. */
    pricing?: Pricing;
    /** Whether the plan is public (visible to site visitors and members). */
    public?: boolean | null;
    /**
     * Whether the plan is archived. Archived plans are not visible and can't be purchased anymore, but existing purchases remain in effect.
     * @readonly
     */
    archived?: boolean;
    /**
     * Whether the plan is marked as primary.
     * @readonly
     */
    primary?: boolean;
    /**
     * Whether the plan has any orders (including pending and unpaid orders).
     * @readonly
     */
    hasOrders?: boolean;
    /**
     * Date plan was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date plan was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * URL-friendly version of plan name. Unique across all plans in the same site.
     * @minLength 1
     * @readonly
     * @format URL_SLUG
     */
    slug?: string | null;
    /**
     * Number of times the same buyer can purchase the plan. Currently limited to support:
     * - Empty value or a value of `0`, meaning no limitation.
     * - Value of `1`, meaning limited to 1 purchase per buyer.
     * @max 1
     */
    maxPurchasesPerBuyer?: number | null;
    /** Whether the buyer can start the plan at a later date. Defaults to false. */
    allowFutureStartDate?: boolean | null;
    /**
     * Whether the buyer is allowed to cancel their plan. Defaults to false.
     * If false, calling Request Cancellation returns an error.
     */
    buyerCanCancel?: boolean | null;
    /**
     * Any terms and conditions that apply to the plan. This information is displayed during checkout.
     * @maxLength 3000
     */
    termsAndConditions?: string | null;
    /**
     * ID of the form associated with the plan at checkout.
     *
     * Learn more about [forms](https://support.wix.com/en/article/wix-forms-an-overview).
     * @format GUID
     */
    formId?: string | null;
}
/**
 * Sets visibility for pricing plans. Visible plans are considered public plans.
 * By default, pricing plans are public, meaning they are visible. Plans can be hidden so that site members and visitors can't choose them.
 * As opposed to archiving, setting visibility can be reversed. This means that a public plan can be hidden, and a hidden plan can be made public (visible). (An archived plan always remains archived and can't be made active again.)
 * Changing a plan’s visibility doesn't impact existing orders for the plan. All orders for hidden plans are still active and keep their perks.
 * @param visible - Whether a plan is visible to members and site visitors. Updates the `public` field.
 * @public
 * @requiredField _id
 * @requiredField visible
 * @param _id - The ID of the plan to either display or hide on the site page.
 * @param options - Plan visibility options.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.SetPlanVisibility
 */
export declare function setPlanVisibility(_id: string, visible: boolean): Promise<NonNullablePaths<SetPlanVisibilityResponse, {
    [P in PlanNonNullablePaths]: `plan.${P}`;
}[PlanNonNullablePaths]>>;
/**
 * Marks a pricing plan as the primary pricing plan. When viewing pricing plans on a site, the primary plan is highlighted with a customizable ribbon. Only a single plan can be marked as a primary plan at any given time. If there is an existing plan marked as primary, calling Make Plan Primary causes the existing primary plan to lose its primary status.
 * @public
 * @requiredField _id
 * @param _id - ID of the pricing plan to set as the primary plan.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.MakePlanPrimary
 */
export declare function makePlanPrimary(_id: string): Promise<NonNullablePaths<MakePlanPrimaryResponse, {
    [P in PlanNonNullablePaths]: `plan.${P}`;
}[PlanNonNullablePaths]>>;
/**
 * Sets all pricing plans as not primary. When viewing pricing plans on a site, no plan is highlighted with a customizable ribbon.
 * @public
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ClearPrimary
 */
export declare function clearPrimary(): Promise<void>;
/**
 * Archives a single plan.
 * When a plan is archived, it's no longer visible as a public plan that can be chosen by site members or visitors.
 * This is because the plan's `public` property is automatically set to `false`.
 * Archived plans can't be purchased or reactivated.
 * Plan archiving doesn't impact existing orders made for the plan. All orders for the plan are still active and keep their perks, payment options, and terms.
 * Wix users can see archived plans in a site's dashboard under **Pricing Plans -> Archived Plans**.
 * > **Note:** An attempt to archive an already-archived plan throws an error.
 * @public
 * @requiredField _id
 * @param _id - ID of the active plan to archive.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ArchivePlan
 */
export declare function archivePlan(_id: string): Promise<NonNullablePaths<ArchivePlanResponse, {
    [P in PlanNonNullablePaths]: `plan.${P}`;
}[PlanNonNullablePaths]>>;
export {};
