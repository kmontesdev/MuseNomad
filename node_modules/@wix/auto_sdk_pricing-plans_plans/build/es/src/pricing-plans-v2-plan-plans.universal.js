import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixPricingPlansV2Plan from './pricing-plans-v2-plan-plans.http.js';
// @ts-ignore
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var PeriodUnit;
(function (PeriodUnit) {
    /** Not defined. */
    PeriodUnit["UNDEFINED"] = "UNDEFINED";
    /** Time unit is a day. */
    PeriodUnit["DAY"] = "DAY";
    /** Time unit is a week. */
    PeriodUnit["WEEK"] = "WEEK";
    /** Time unit is a month. */
    PeriodUnit["MONTH"] = "MONTH";
    /** Time unit is a year. */
    PeriodUnit["YEAR"] = "YEAR";
})(PeriodUnit || (PeriodUnit = {}));
export var AppliedAt;
(function (AppliedAt) {
    AppliedAt["UNKNOWN_CHARGE_EVENT"] = "UNKNOWN_CHARGE_EVENT";
    /** Will charge the fee on the first payment. If the order has a free trial, it will charge after the free trial. */
    AppliedAt["FIRST_PAYMENT"] = "FIRST_PAYMENT";
})(AppliedAt || (AppliedAt = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var ArchivedFilter;
(function (ArchivedFilter) {
    /** Returns all plans that are active. */
    ArchivedFilter["ACTIVE"] = "ACTIVE";
    /** Returns all plans that are archived. */
    ArchivedFilter["ARCHIVED"] = "ARCHIVED";
    /** Returns all plans that are active and archived. */
    ArchivedFilter["ARCHIVED_AND_ACTIVE"] = "ARCHIVED_AND_ACTIVE";
})(ArchivedFilter || (ArchivedFilter = {}));
export var PublicFilter;
(function (PublicFilter) {
    /** Returns all public and hidden plans. */
    PublicFilter["PUBLIC_AND_HIDDEN"] = "PUBLIC_AND_HIDDEN";
    /** Returns only public plans. */
    PublicFilter["PUBLIC"] = "PUBLIC";
    /** Returns only hidden plans. */
    PublicFilter["HIDDEN"] = "HIDDEN";
})(PublicFilter || (PublicFilter = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Retrieves a list of up to 100 public pricing plans. Public plans are visible plans that are available to site visitors and can be purchased.
 * @public
 * @param options - Options for filtering and paging the list of public plans.
 * @permissionId PRICING_PLANS.READ_PUBLIC_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Access Verticals by Automations
 * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Set Up Automations
 * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ListPublicPlans
 */
export async function listPublicPlans(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        limit: options?.limit,
        offset: options?.offset,
        planIds: options?.planIds,
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.listPublicPlans(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                limit: '$[0].limit',
                offset: '$[0].offset',
                planIds: '$[0].planIds',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of public pricing plans.
 *
 *
 * The `queryPublicPlans()` method builds a query to retrieve a list of up to 1,000 public plans and returns a [`PublicPlansQueryBuilder`](#plansquerybuilder) object.
 *
 * The returned object contains the query definition which is typically used to run the query using the [`find()`](#plansquerybuilder/find) method.
 *
 * You can refine the query by chaining `PublicPlansQueryBuilder` methods onto the query. `PublicPlansQueryBuilder` methods enable you to sort, filter, and control the results that `queryPublicPlans()` returns.
 *
 * `queryPublicPlans()` runs with the following `PublicPlansQueryBuilder` defaults that you can override:
 * - [`skip`](#plansquerybuilder/skip): `0`
 * - [`limit`](#plansquerybuilder/limit): `50`
 *
 * The methods that are chained to `queryPublicPlans()` are applied in the order they are called. For example, if you sort on the `_createdDate` property in ascending order and then on the `_id` property in ascending order, the results are sorted first by the created date of the items and then, if there are multiple results with the same date, the items are sorted by `_id` in ascending order, per created date value.
 *
 * The following `PublicPlansQueryBuilder` methods are supported for the `queryPublicPlans()` method. For a full description of the Plans object, see the object returned for the [`items`](#plansqueryresult/items) property in [`PublicPlansQueryResult`](#plansqueryresult).
 * @public
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-ORDERS
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-ORDERS
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Portfolio
 * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO
 * @permissionScope Access Verticals by Automations
 * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Set Up Automations
 * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS
 * @permissionId PRICING_PLANS.READ_PUBLIC_PLANS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.QueryPublicPlans
 */
export function queryPublicPlans() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixPricingPlansV2Plan.queryPublicPlans(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, []));
            return {
                items: transformedData?.plans,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'OFFSET',
        transformationPaths: {},
    });
}
/**
 * Retrieves a pricing plan by ID.
 * @param _id - Plan ID.
 * @public
 * @requiredField _id
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Pricing plan.
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.GetPlan
 */
export async function getPlan(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Plan.getPlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.plan;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 100 pricing plans (including public, hidden, and archived plans).
 * @public
 * @param options - Options for filtering and paging the list of plans.
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ListPlans
 */
export async function listPlans(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        archived: options?.archived,
        public: options?.public,
        limit: options?.limit,
        offset: options?.offset,
        planIds: options?.planIds,
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.listPlans(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                archived: '$[0].archived',
                public: '$[0].public',
                limit: '$[0].limit',
                offset: '$[0].offset',
                planIds: '$[0].planIds',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets statistics about the pricing plans. Currently provides only the total number of pricing plans, including archived plans.
 * @public
 * @permissionId PRICING_PLANS.READ_PLANS
 * @permissionScope Read Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.READ-PLANS
 * @permissionScope Manage Stores
 * @permissionScopeId SCOPE.STORES.MANAGE-STORES
 * @permissionScope Manage Events
 * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS
 * @permissionScope Manage Challenges
 * @permissionScopeId SCOPE.CHALLENGES.MANAGE
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.GetPlanStats
 */
export async function getPlanStats() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixPricingPlansV2Plan.getPlanStats(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a pricing plan. The specified `plan` object must contain a pricing model. A pricing model can be 1 of the following:
 * - **A subscription**: A subscription with recurring payments and how often the plan occurs. Subscriptions can have free trial days.
 * - **A plan that doesn't renew**: A single payment for a specific duration that doesn't renew.
 * - **An unlimited plan**: A single payment for an unlimited amount of time (until canceled).
 * Pricing plans are available to the Wix user in the Pricing Plans section in a site's dashboard.
 * @public
 * @requiredField plan
 * @requiredField plan.name
 * @requiredField plan.pricing
 * @requiredField plan.pricing.pricingModel
 * @requiredField plan.pricing.pricingModel.singlePaymentForDuration.count
 * @requiredField plan.pricing.pricingModel.subscription.cycleCount
 * @requiredField plan.pricing.pricingModel.subscription.cycleDuration
 * @requiredField plan.pricing.pricingModel.subscription.cycleDuration.count
 * @param plan - Information for the plan being created.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Created plan.
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.CreatePlan
 */
export async function createPlan(plan) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ plan: plan });
    const reqOpts = ambassadorWixPricingPlansV2Plan.createPlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.plan;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { plan: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['plan']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a pricing plan.
 * Updating a plan doesn't impact existing orders made for the plan. All orders keep the details of the original plan that was active at the time of purchase.
 * @public
 * @requiredField _id
 * @requiredField plan
 * @param _id - ID of the plan to update.
 * @param options - Options for updating the plan.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @returns Updated plan.
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.UpdatePlan
 */
export async function updatePlan(_id, plan) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        plan: { ...plan, id: _id },
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.updatePlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.plan;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { plan: '$[1]' },
            explicitPathsToArguments: { 'plan.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'plan']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets visibility for pricing plans. Visible plans are considered public plans.
 * By default, pricing plans are public, meaning they are visible. Plans can be hidden so that site members and visitors can't choose them.
 * As opposed to archiving, setting visibility can be reversed. This means that a public plan can be hidden, and a hidden plan can be made public (visible). (An archived plan always remains archived and can't be made active again.)
 * Changing a plan’s visibility doesn't impact existing orders for the plan. All orders for hidden plans are still active and keep their perks.
 * @param visible - Whether a plan is visible to members and site visitors. Updates the `public` field.
 * @public
 * @requiredField _id
 * @requiredField visible
 * @param _id - The ID of the plan to either display or hide on the site page.
 * @param options - Plan visibility options.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.SetPlanVisibility
 */
export async function setPlanVisibility(_id, visible) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        visible: visible,
    });
    const reqOpts = ambassadorWixPricingPlansV2Plan.setPlanVisibility(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', visible: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'visible']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Marks a pricing plan as the primary pricing plan. When viewing pricing plans on a site, the primary plan is highlighted with a customizable ribbon. Only a single plan can be marked as a primary plan at any given time. If there is an existing plan marked as primary, calling Make Plan Primary causes the existing primary plan to lose its primary status.
 * @public
 * @requiredField _id
 * @param _id - ID of the pricing plan to set as the primary plan.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.MakePlanPrimary
 */
export async function makePlanPrimary(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Plan.makePlanPrimary(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets all pricing plans as not primary. When viewing pricing plans on a site, no plan is highlighted with a customizable ribbon.
 * @public
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ClearPrimary
 */
export async function clearPrimary() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixPricingPlansV2Plan.clearPrimary(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Archives a single plan.
 * When a plan is archived, it's no longer visible as a public plan that can be chosen by site members or visitors.
 * This is because the plan's `public` property is automatically set to `false`.
 * Archived plans can't be purchased or reactivated.
 * Plan archiving doesn't impact existing orders made for the plan. All orders for the plan are still active and keep their perks, payment options, and terms.
 * Wix users can see archived plans in a site's dashboard under **Pricing Plans -> Archived Plans**.
 * > **Note:** An attempt to archive an already-archived plan throws an error.
 * @public
 * @requiredField _id
 * @param _id - ID of the active plan to archive.
 * @permissionId PRICING_PLANS.MANAGE_PLANS
 * @permissionScope Manage Pricing Plans
 * @permissionScopeId SCOPE.DC-PAIDPLANS.MANAGE-PLANS
 * @applicableIdentity APP
 * @fqn com.wixpress.membership.v2.plans.PlansServiceV2.ArchivePlan
 */
export async function archivePlan(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixPricingPlansV2Plan.archivePlan(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=pricing-plans-v2-plan-plans.universal.js.map